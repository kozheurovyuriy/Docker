sudo apt-get -y install python-pip
sudo pip install docker-compose

3: Запуск контейнера при помощи Docker Compose
mkdir hello-world
cd hello-world
nano docker-compose.yml
------------------
my-test:
image: hello-world
------------------
В каталоге ~/hello-world выполните следующую команду, чтобы создать контейнер:
docker-compose up

4: Команды Docker Compose
Эта команда запускает docker-compose в фоновом режиме.
docker-compose up -d

Чтобы просмотреть группу контейнеров Docker (и запущенных, и отключенных), используйте следующую команду:
docker-compose ps

Чтобы остановить все контейнеры Docker в группе конкретного приложения
Примечание: Также можно использовать команду docker-compose kill.
docker-compose stop

Иногда Docker хранит устаревшую информацию во внутреннем томе. Чтобы вернуть среду в её исходное состояние, 
нужно использовать команду rm, которая удаляет все контейнеры, созданные группой:
docker-compose rm

5: Работа с файловой системой контейнера Docker (опционально) docker exec
Если вам нужно взаимодействовать с файловой системой контейнера при помощи командной строки, 
используйте команду .
mkdir ~/nginx && cd $_
nano docker-compose.yml
------------------
nginx:
image: nginx
------------------
Сохраните и закройте файл. Теперь нужно запустить контейнер Nginx как фоновый процесс:
docker-compose up -d
После этого нужно узнать CONTAINER ID данного контейнера. Список запущенных контейнеров можно просмотреть при помощи команды:
docker ps
docker exec -it e90e12f70418 /bin/bash

